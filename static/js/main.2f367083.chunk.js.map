{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2f367083.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-white dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?set=set2&size=200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{ name }</h2>\r\n\t\t\t\t<p>{ email }</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\t//Uncomment it to test ErrorBoudary\r\n\t/*if (true) {\r\n\t\tthrow new Error('NOOOOO!');\r\n\t}*/\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map(robot => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={ robot.id } \r\n\t\t\t\t\t\t\tid={ robot.id } \r\n\t\t\t\t\t\t\tname={ robot.name } \r\n\t\t\t\t\t\t\temail={ robot.email }\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\t\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--purple bg-white'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='search monsters'\r\n\t\t\t\tonChange={ searchChange }\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid white', height: '550px' }}>\r\n\t\t\t{ props.children }\r\n\t\t</div>\r\n\t); \r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n \t\trobots: state.requestRobots.robots,\r\n \t\tisPending: state.requestRobots.isPending,\r\n \t\terror: state.requestRobots.error\r\n \t};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t};\r\n};\r\n\r\nclass App extends Component {\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props; \r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\t\r\n\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>MonsterFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={ onSearchChange }/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tisPending\r\n\t\t\t\t\t\t?\t<h1>Loading</h1>\r\n\t\t\t\t\t\t: \t<ErrorBoundary>\r\n\t\t\t\t\t\t\t\t<CardList robots={ filteredRobots } />\r\n\t\t\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PRENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PRENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n};\r\n\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';  \r\n\r\nexport const REQUEST_ROBOTS_PRENDING = 'REQUEST_ROBOTS_PRENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESSS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PRENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n};\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PRENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false });\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport { createLogger } from 'redux-logger';\r\n// waits if any actions return a function instead of an object\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n  \t\t<Provider store={ store }>\r\n  \t\t\t<App/>\r\n  \t\t</Provider>\t\r\n  \t</React.StrictMode>,\r\n  \tdocument.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}